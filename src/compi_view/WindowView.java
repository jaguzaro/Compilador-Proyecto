/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package compi_view;

import java.awt.BorderLayout;
import java.awt.Component;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.jfree.chart.ChartPanel;
import source_compi.LexError;
import source_compi.Token;
import util.Symbols;

/**
 *
 * @author GAMING PC
 */
public class WindowView extends javax.swing.JFrame {

    /**
     * Creates new form WindowView
     */
    public WindowView() {
        initComponents();
        controllerData.insertDataContainers(containersCounter, "", true, "", null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        enterTextArea = new javax.swing.JTextArea();
        addContainer = new javax.swing.JButton();
        graphPanel = new javax.swing.JPanel();
        nextGraphButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        containersComboBox = new javax.swing.JComboBox<>();
        previousGraphButton = new javax.swing.JButton();
        namefileLabel = new javax.swing.JLabel();
        navbar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newFileMItem = new javax.swing.JMenuItem();
        openFileMItem = new javax.swing.JMenuItem();
        saveMItem = new javax.swing.JMenuItem();
        saveAsMItem = new javax.swing.JMenuItem();
        deleteContMItem = new javax.swing.JMenuItem();
        executeMenuButton = new javax.swing.JMenu();
        executeEntryButton = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        symbReportMButton = new javax.swing.JMenuItem();
        tokenReportMButton = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        outputTextArea.setColumns(20);
        outputTextArea.setRows(5);
        jScrollPane1.setViewportView(outputTextArea);

        enterTextArea.setColumns(20);
        enterTextArea.setRows(5);
        jScrollPane2.setViewportView(enterTextArea);

        addContainer.setText("Agregar pestaña");
        addContainer.setToolTipText("");
        addContainer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addContainerActionPerformed(evt);
            }
        });

        graphPanel.setPreferredSize(new java.awt.Dimension(550, 400));
        graphPanel.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                graphPanelComponentAdded(evt);
            }
            public void componentRemoved(java.awt.event.ContainerEvent evt) {
                graphPanelComponentRemoved(evt);
            }
        });

        javax.swing.GroupLayout graphPanelLayout = new javax.swing.GroupLayout(graphPanel);
        graphPanel.setLayout(graphPanelLayout);
        graphPanelLayout.setHorizontalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 649, Short.MAX_VALUE)
        );
        graphPanelLayout.setVerticalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 355, Short.MAX_VALUE)
        );

        nextGraphButton.setText("Siguiente");
        nextGraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextGraphButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Consola");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Entrada");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("Grafica");

        containersComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pestaña 1" }));
        containersComboBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                containersComboBoxPopupMenuWillBecomeVisible(evt);
            }
        });
        containersComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                containersComboBoxActionPerformed(evt);
            }
        });

        previousGraphButton.setText("Anterior");
        previousGraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousGraphButtonActionPerformed(evt);
            }
        });

        jMenu1.setText("Archivo");

        newFileMItem.setText("Nuevo Archivo");
        newFileMItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileMItemActionPerformed(evt);
            }
        });
        jMenu1.add(newFileMItem);

        openFileMItem.setText("Abrir Archivo");
        openFileMItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileMItemActionPerformed(evt);
            }
        });
        jMenu1.add(openFileMItem);

        saveMItem.setText("Guardar");
        saveMItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMItemActionPerformed(evt);
            }
        });
        jMenu1.add(saveMItem);

        saveAsMItem.setText("Guardar Como");
        saveAsMItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMItemActionPerformed(evt);
            }
        });
        jMenu1.add(saveAsMItem);

        deleteContMItem.setText("Eliminar Pestaña");
        deleteContMItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteContMItemActionPerformed(evt);
            }
        });
        jMenu1.add(deleteContMItem);

        navbar.add(jMenu1);

        executeMenuButton.setText("Ejecutar");
        executeMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeMenuButtonActionPerformed(evt);
            }
        });

        executeEntryButton.setText("Ejecutar entrada");
        executeEntryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeEntryButtonActionPerformed(evt);
            }
        });
        executeMenuButton.add(executeEntryButton);

        navbar.add(executeMenuButton);

        jMenu3.setText("Reportes");

        jMenuItem6.setText("Reporte de Errores");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getErrorsReportButton(evt);
            }
        });
        jMenu3.add(jMenuItem6);

        symbReportMButton.setText("Reporte de Simbolos");
        symbReportMButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                symbReportMButtonActionPerformed(evt);
            }
        });
        jMenu3.add(symbReportMButton);

        tokenReportMButton.setText("Reporte de Tokens");
        tokenReportMButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tokenReportMButtonActionPerformed(evt);
            }
        });
        jMenu3.add(tokenReportMButton);

        navbar.add(jMenu3);

        setJMenuBar(navbar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(193, 193, 193)
                .addComponent(addContainer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(namefileLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(655, 655, 655))
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 1148, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(containersComboBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(249, 249, 249)
                                        .addComponent(previousGraphButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(nextGraphButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(43, 43, 43)
                                        .addComponent(jLabel3)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(graphPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 649, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addContainer)
                        .addComponent(namefileLabel))
                    .addComponent(containersComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(graphPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nextGraphButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(previousGraphButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addContainerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addContainerActionPerformed
        // TODO add your handling code here:
        int container = getCurrentContainer();
        controllerData.updateContainers(container, enterTextArea.getText());
        containersCounter += 1;
        containersComboBox.addItem(String.format("Pestaña %d", containersCounter));
        controllerData.insertDataContainers(containersCounter, "", true, "", null);
        controllerData.getDataContainers();
        containersComboBox.setSelectedItem(String.format("Pestaña %d", containersCounter));
        enterTextArea.setText("");
        graphPanel.removeAll();
        graphPanel.revalidate();
        graphPanel.repaint();
        pack();
        revalidate();
    }//GEN-LAST:event_addContainerActionPerformed

    private void containersComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_containersComboBoxActionPerformed
        // TODO add your handling code here:
        ContainersData dataContainer = controllerData.findContainer(getCurrentContainer());
        enterTextArea.setText(dataContainer.text);
        namefileLabel.setText(dataContainer.namefile);
        graphPanel.removeAll();
        graphPanel.revalidate();
        graphPanel.repaint();
        ChartPanel newPanel = controllerData.findGraph((ChartPanel) null, getCurrentContainer(), 3);
        if(newPanel != null){
            graphPanel.setLayout(new BorderLayout());
            graphPanel.add(newPanel, BorderLayout.CENTER);
            graphPanel.revalidate();
            graphPanel.repaint();
            pack();
            repaint();
        }

    }//GEN-LAST:event_containersComboBoxActionPerformed

    private void containersComboBoxPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_containersComboBoxPopupMenuWillBecomeVisible
        // TODO add your handling code here:
        int container = getCurrentContainer();
        controllerData.updateContainers(container, enterTextArea.getText());
    }//GEN-LAST:event_containersComboBoxPopupMenuWillBecomeVisible

    private void newFileMItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileMItemActionPerformed
        // TODO add your handling code here:
        int container = getCurrentContainer();
        controllerData.updateContainers(container, enterTextArea.getText());
        containersCounter += 1;
        containersComboBox.addItem(String.format("Pestaña %d", containersCounter));
        controllerData.insertDataContainers(containersCounter, "", true, "", null);
        containersComboBox.setSelectedItem(String.format("Pestaña %d", containersCounter));
        enterTextArea.setText("");
    }//GEN-LAST:event_newFileMItemActionPerformed

    private void saveMItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMItemActionPerformed
        // TODO add your handling code here:
        saveFile();
    }//GEN-LAST:event_saveMItemActionPerformed

    private void getErrorsReportButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getErrorsReportButton
        // TODO add your handling code here:
        ArrayList<LexError> errorsTable = controllerData.findContainer(getCurrentContainer()).getErrorsTable();
        String content = "";
        String head = """
                        <th>#</th>
                        <th>Tipo</th>
                        <th>Descripcion</th>
                        <th>Linea</th>
                        <th>Columna</th>
                      """;
        int counterErrors = 0;
        for (LexError error: errorsTable){
            counterErrors += 1;
            content += String.format("""
                                        <tr>
                                            <td>%d</td>
                                            <td>%s</td>
                                            <td>%s</td>
                                            <td>%d</td>
                                            <td>%d</td>
                                        </tr>
                                     """, counterErrors, error.getType(), error.getDescription(), error.getRow(), error.getColumn());
        }
        main.Main.mainController.createHTML("Reporte Errores.html", "Tabla de Errores", head, content);
    }//GEN-LAST:event_getErrorsReportButton

    private void openFileMItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileMItemActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos (.df)", "df");
        fileChooser.setFileFilter(filter);
        int selection = fileChooser.showOpenDialog(WindowView.this);
        if(selection == JFileChooser.APPROVE_OPTION){
            File selectedFile = fileChooser.getSelectedFile();
            try{
                BufferedReader br = new BufferedReader(new FileReader(selectedFile));
                String text;
                StringBuilder content = new StringBuilder();
                while ((text = br.readLine()) != null){
                    content.append(text).append("\n");
                }
                br.close();
                Object[] options = {"Abrir en pestaña actual", "Abrir en una pestaña nueva"};
                int confirmation = JOptionPane.showOptionDialog(rootPane, "Abrir archivo en: ", "Confirmar acción", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
                int container = getCurrentContainer();
                if(confirmation == JOptionPane.YES_OPTION){
                    controllerData.updateContainers(container, content.toString(), selectedFile.getName().toString(), false, selectedFile);
                }else{
                    controllerData.updateContainers(container, enterTextArea.getText());
                    containersCounter += 1;
                    containersComboBox.addItem(String.format("Pestaña %d", containersCounter));
                    controllerData.insertDataContainers(containersCounter, "", true, "", selectedFile);
                    containersComboBox.setSelectedItem(String.format("Pestaña %d", containersCounter));
                }
                    enterTextArea.setText(content.toString());
                    namefileLabel.setText(selectedFile.getName().toString());

            }catch(IOException ex){
                ex.printStackTrace();
                JOptionPane.showMessageDialog(rootPane, "Error al leer el archivo", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }       
    }//GEN-LAST:event_openFileMItemActionPerformed

    private void saveAsMItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMItemActionPerformed
        // TODO add your handling code here:
        saveAs();
    }//GEN-LAST:event_saveAsMItemActionPerformed

    private void deleteContMItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteContMItemActionPerformed
        // TODO add your handling code here:
        int container = getCurrentContainer();
        controllerData.deleteContainer(container);
        containersComboBox.removeItem(String.format("Pestaña %d", container));
        enterTextArea.setText("");
    }//GEN-LAST:event_deleteContMItemActionPerformed

    private void nextGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextGraphButtonActionPerformed
        // TODO add your handling code here:
        Component[] components = graphPanel.getComponents();
        ChartPanel newPanel = controllerData.findGraph((ChartPanel) components[0], getCurrentContainer(), 2);
        if(newPanel != null){
            System.out.println("no es null" + newPanel);
            graphPanel.removeAll();
            graphPanel.setLayout(new BorderLayout());
            graphPanel.add(newPanel, BorderLayout.CENTER);
            graphPanel.revalidate();
            graphPanel.repaint();
            pack();
            repaint();
        }
    }//GEN-LAST:event_nextGraphButtonActionPerformed

    private void previousGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousGraphButtonActionPerformed
        // TODO add your handling code here:
        Component[] components = graphPanel.getComponents();
        ChartPanel newPanel = controllerData.findGraph((ChartPanel) components[0], getCurrentContainer(), 1);
        if(newPanel != null){
            System.out.println("no es null" + newPanel);
            graphPanel.removeAll();
            graphPanel.setLayout(new BorderLayout());
            graphPanel.add(newPanel, BorderLayout.CENTER);
            graphPanel.revalidate();
            graphPanel.repaint();
            pack();
            repaint();
        }
    }//GEN-LAST:event_previousGraphButtonActionPerformed

    private void graphPanelComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_graphPanelComponentAdded
        // TODO add your handling code here:
        nextGraphButton.setEnabled(true);
        previousGraphButton.setEnabled(true);
    }//GEN-LAST:event_graphPanelComponentAdded

    private void graphPanelComponentRemoved(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_graphPanelComponentRemoved
        // TODO add your handling code here:
        if(graphPanel.getComponentCount() == 0){
            nextGraphButton.setEnabled(false);
            previousGraphButton.setEnabled(false);
        }
    }//GEN-LAST:event_graphPanelComponentRemoved

    private void executeMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeMenuButtonActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_executeMenuButtonActionPerformed

    private void executeEntryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeEntryButtonActionPerformed
        // TODO add your handling code here:
        if(enterTextArea.getText().length() == 0){
            JOptionPane.showMessageDialog(rootPane, "Entrada vacia, no se puede analizar", "Aviso", JOptionPane.WARNING_MESSAGE);
        }else{
            main.Main.mainController.symbolsTable.clear();
            outputTextArea.setText("");
            try {
                source_compi.Lexer lexer = new source_compi.Lexer(new StringReader(enterTextArea.getText())); 
                source_compi.Parser parser = new source_compi.Parser(lexer);
                parser.parse();
                ArrayList<Token> tokensTable = lexer.getTokens();
                ArrayList<LexError> errorsTable = lexer.getErrors();
                ArrayList<LexError> sintErrorsTable = parser.getErrorsTable();
                for(LexError sE: sintErrorsTable){
                    errorsTable.add(sE);
                }
                controllerData.setReportsContainers(getCurrentContainer(), tokensTable, errorsTable, main.Main.mainController.symbolsTable);
                lexer.counter = 0;
                lexer.counterErrors = 0;
            } catch (Exception e) {
                System.out.println("Error fatal en compilación de entrada.");
                System.out.println(e);
        }
        }
        
    }//GEN-LAST:event_executeEntryButtonActionPerformed

    private void symbReportMButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_symbReportMButtonActionPerformed
        // TODO add your handling code here:
        HashMap<String, Symbols> symbsTable = controllerData.findContainer(getCurrentContainer()).getSymbolsTable();
        String content = "";
        String head = """
                        <th>#</th>
                        <th>Nombre</th>
                        <th>Tipo</th>
                        <th>Valor</th>
                        <th>Linea</th>
                        <th>Columna</th>
                      """;
        int counterSymb = 0;
        for(Map.Entry<String, Symbols> entry: symbsTable.entrySet()){
            var data = entry.getValue();
            counterSymb += 1;
            content += String.format("""
                                        <tr>
                                            <td>%d</td>
                                            <td>%s</td>
                                            <td>%s</td>
                                            <td>%s</td>
                                            <td>%d</td>
                                            <td>%d</td>
                                        </tr>
                                     """, counterSymb, entry.getKey(),
                                    data.getType(), data.getValue().toString(), data.getRow(), data.getColumn());
        }
        main.Main.mainController.createHTML("Reporte Simbolos.html", "Tabla de Simbolos", head, content);
    }//GEN-LAST:event_symbReportMButtonActionPerformed

    private void tokenReportMButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tokenReportMButtonActionPerformed
        // TODO add your handling code here:
        ArrayList<Token> tokensTable = controllerData.findContainer(getCurrentContainer()).getTokensTable();
        String content = "";
        String head = """
                        <th>#</th>
                        <th>Lexema</th>
                        <th>Tipo</th>
                        <th>Linea</th>
                        <th>Columna</th>
                      """;
        int counterToken = 0;
        for (Token token: tokensTable){
            counterToken += 1;
            content += String.format("""
                                        <tr>
                                            <td>%d</td>
                                            <td>%s</td>
                                            <td>%s</td>
                                            <td>%d</td>
                                            <td>%d</td>
                                        </tr>
                                     """, counterToken, token.getLexeme(), token.getType(), token.getRow(), token.getColumn());
        }
        main.Main.mainController.createHTML("Reporte Tokens.html", "Tabla de Tokens", head, content);
    }//GEN-LAST:event_tokenReportMButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    
    public int getCurrentContainer(){
        String itemSelected = containersComboBox.getSelectedItem().toString();
        int container = Integer.parseInt(itemSelected.replace("Pestaña ", ""));
        return container;
    }
    
    public void saveFile(){
        ContainersData dataContainer = controllerData.findContainer(getCurrentContainer());
        saveOperation(dataContainer.file);
    }
    
    public void saveAs(){
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos (.df)", "df");
        fileChooser.setFileFilter(filter);
        int result = fileChooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            if (file.exists()) {
                return;
            }

            String filename = file.getName();
            if (!filename.toLowerCase().endsWith(".df")) {
                file = new File(file.getParentFile(), filename + ".df");
            }

            saveOperation(file);
        }
    }
    
    public void saveOperation(File file){
        try (PrintWriter writer = new PrintWriter(new FileWriter(file))){
            writer.println(enterTextArea.getText());
            JOptionPane.showMessageDialog(rootPane, "Archivo guardado exitosamente");
            int container = getCurrentContainer();
            controllerData.updateContainers(container, false, file);
            namefileLabel.setText(file.getName());
        }catch(IOException e){
            JOptionPane.showMessageDialog(rootPane, "Error al guardar el archivo");
        }
    }
    
    public void setGraph(ChartPanel panel){
        int container = getCurrentContainer();
        controllerData.setGraphsContainer(panel, container);
        controllerData.setAnalyzedContainer(container);
        if(graphPanel.getComponentCount() <= 0){
            System.out.println("entra");
            graphPanel.setLayout(new BorderLayout());
            graphPanel.add(panel, BorderLayout.CENTER);
            graphPanel.revalidate();
            graphPanel.repaint();
        }
        pack();
        repaint();
    }
    
    public void setOutputText(String text){
        outputTextArea.append(text);
    }
    
    int containersCounter = 1;
    int counterPanel = 0;
    
    ControllerData controllerData = new ControllerData();
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WindowView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WindowView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WindowView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WindowView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WindowView().setVisible(true);
                
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addContainer;
    private javax.swing.JComboBox<String> containersComboBox;
    private javax.swing.JMenuItem deleteContMItem;
    private javax.swing.JTextArea enterTextArea;
    private javax.swing.JMenuItem executeEntryButton;
    private javax.swing.JMenu executeMenuButton;
    private javax.swing.JPanel graphPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel namefileLabel;
    private javax.swing.JMenuBar navbar;
    private javax.swing.JMenuItem newFileMItem;
    private javax.swing.JButton nextGraphButton;
    private javax.swing.JMenuItem openFileMItem;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JButton previousGraphButton;
    private javax.swing.JMenuItem saveAsMItem;
    private javax.swing.JMenuItem saveMItem;
    private javax.swing.JMenuItem symbReportMButton;
    private javax.swing.JMenuItem tokenReportMButton;
    // End of variables declaration//GEN-END:variables
}

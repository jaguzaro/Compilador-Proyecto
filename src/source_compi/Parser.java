
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package source_compi;

import util.Instruction;
import util.MathOperations;
import util.Data;
import util.GraphBar;
import util.GraphPie;
import util.GraphLine;
import util.GraphHistogram;
import java.util.ArrayList;
import java.util.Arrays;
import util.StatisticalOperations;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\005\000\002\004" +
    "\004\000\002\004\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\004\000\002\022\015\000\002\023" +
    "\015\000\002\024\020\000\002\024\020\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\003\000" +
    "\002\006\003\000\002\007\003\000\002\007\005\000\002" +
    "\010\003\000\002\010\005\000\002\011\004\000\002\011" +
    "\005\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\052\003\000\002\052\005\000\002\025\003\000" +
    "\002\025\003\000\002\026\010\000\002\026\010\000\002" +
    "\026\010\000\002\026\010\000\002\026\010\000\002\027" +
    "\006\000\002\027\006\000\002\027\006\000\002\027\006" +
    "\000\002\027\006\000\002\027\006\000\002\030\012\000" +
    "\002\012\003\000\002\012\003\000\002\012\005\000\002" +
    "\012\005\000\002\031\015\000\002\013\003\000\002\013" +
    "\003\000\002\021\004\000\002\021\005\000\002\014\014" +
    "\000\002\016\014\000\002\017\014\000\002\020\014\000" +
    "\002\015\004\000\002\015\005\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\035\003\000\002\035\003\000\002\045\004\000" +
    "\002\045\003\000\002\046\004\000\002\046\003\000\002" +
    "\047\004\000\002\047\003\000\002\050\004\000\002\050" +
    "\003\000\002\036\012\000\002\037\012\000\002\040\012" +
    "\000\002\041\012\000\002\042\012\000\002\043\012\000" +
    "\002\044\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0120\000\004\026\004\001\002\000\022\003\025\007" +
    "\012\010\007\014\027\043\020\044\013\045\024\046\021" +
    "\001\002\000\004\002\006\001\002\000\004\002\001\001" +
    "\002\000\004\021\u0110\001\002\000\024\003\025\007\012" +
    "\010\007\014\027\027\u010e\043\020\044\013\045\024\046" +
    "\021\001\002\000\024\003\ufff8\007\ufff8\010\ufff8\014\ufff8" +
    "\027\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\001\002\000" +
    "\004\021\365\001\002\000\004\061\337\001\002\000\024" +
    "\003\ufff6\007\ufff6\010\ufff6\014\ufff6\027\ufff6\043\ufff6\044" +
    "\ufff6\045\ufff6\046\ufff6\001\002\000\024\003\ufff9\007\ufff9" +
    "\010\ufff9\014\ufff9\027\ufff9\043\ufff9\044\ufff9\045\ufff9\046" +
    "\ufff9\001\002\000\024\003\ufffc\007\ufffc\010\ufffc\014\ufffc" +
    "\027\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\001\002\000" +
    "\024\003\ufffb\007\ufffb\010\ufffb\014\ufffb\027\ufffb\043\ufffb" +
    "\044\ufffb\045\ufffb\046\ufffb\001\002\000\004\061\324\001" +
    "\002\000\004\061\277\001\002\000\024\003\ufffa\007\ufffa" +
    "\010\ufffa\014\ufffa\027\ufffa\043\ufffa\044\ufffa\045\ufffa\046" +
    "\ufffa\001\002\000\024\003\ufff5\007\ufff5\010\ufff5\014\ufff5" +
    "\027\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\001\002\000" +
    "\004\061\177\001\002\000\004\023\176\001\002\000\024" +
    "\003\ufffd\007\ufffd\010\ufffd\014\ufffd\027\ufffd\043\ufffd\044" +
    "\ufffd\045\ufffd\046\ufffd\001\002\000\004\021\032\001\002" +
    "\000\024\003\ufffe\007\ufffe\010\ufffe\014\ufffe\027\ufffe\043" +
    "\ufffe\044\ufffe\045\ufffe\046\ufffe\001\002\000\024\003\ufff7" +
    "\007\ufff7\010\ufff7\014\ufff7\027\ufff7\043\ufff7\044\ufff7\045" +
    "\ufff7\046\ufff7\001\002\000\004\021\033\001\002\000\006" +
    "\015\034\016\035\001\002\000\004\024\062\001\002\000" +
    "\004\024\036\001\002\000\006\005\037\006\040\001\002" +
    "\000\012\013\uffec\020\uffec\060\uffec\063\uffec\001\002\000" +
    "\012\013\uffeb\020\uffeb\060\uffeb\063\uffeb\001\002\000\004" +
    "\063\042\001\002\000\004\064\043\001\002\000\006\017" +
    "\046\057\044\001\002\000\010\004\052\005\054\006\055" +
    "\001\002\000\004\013\050\001\002\000\004\006\047\001" +
    "\002\000\004\013\uffca\001\002\000\004\023\051\001\002" +
    "\000\024\003\uffcd\007\uffcd\010\uffcd\014\uffcd\027\uffcd\043" +
    "\uffcd\044\uffcd\045\uffcd\046\uffcd\001\002\000\006\020\uffe4" +
    "\060\uffe4\001\002\000\006\020\uffe1\060\uffe1\001\002\000" +
    "\006\020\uffe3\060\uffe3\001\002\000\006\020\uffe2\060\uffe2" +
    "\001\002\000\006\020\057\060\060\001\002\000\010\004" +
    "\052\005\054\006\055\001\002\000\004\013\uffc9\001\002" +
    "\000\006\020\uffe0\060\uffe0\001\002\000\036\004\104\005" +
    "\064\006\071\030\065\031\063\032\102\033\073\034\105" +
    "\035\074\036\100\037\067\040\072\041\070\042\076\001" +
    "\002\000\004\061\171\001\002\000\006\013\uffd0\020\uffd0" +
    "\001\002\000\004\061\164\001\002\000\012\013\uffee\020" +
    "\uffee\060\uffee\062\uffee\001\002\000\004\061\161\001\002" +
    "\000\004\061\156\001\002\000\012\013\uffed\020\uffed\060" +
    "\uffed\062\uffed\001\002\000\004\061\153\001\002\000\004" +
    "\061\146\001\002\000\004\061\143\001\002\000\006\013" +
    "\uffd1\020\uffd1\001\002\000\004\061\140\001\002\000\006" +
    "\013\134\020\133\001\002\000\004\061\120\001\002\000" +
    "\012\013\uffdf\020\uffdf\060\uffdf\062\uffdf\001\002\000\004" +
    "\061\113\001\002\000\012\013\uffde\020\uffde\060\uffde\062" +
    "\uffde\001\002\000\012\013\uffef\020\uffef\060\uffef\062\uffef" +
    "\001\002\000\004\061\106\001\002\000\034\004\104\006" +
    "\071\030\065\031\063\032\102\033\073\034\105\035\074" +
    "\036\100\037\067\040\072\041\070\042\076\001\002\000" +
    "\004\020\110\001\002\000\034\004\104\006\071\030\065" +
    "\031\063\032\102\033\073\034\105\035\074\036\100\037" +
    "\067\040\072\041\070\042\076\001\002\000\004\062\112" +
    "\001\002\000\012\013\uffd9\020\uffd9\060\uffd9\062\uffd9\001" +
    "\002\000\034\004\104\006\071\030\065\031\063\032\102" +
    "\033\073\034\105\035\074\036\100\037\067\040\072\041" +
    "\070\042\076\001\002\000\004\020\115\001\002\000\034" +
    "\004\104\006\071\030\065\031\063\032\102\033\073\034" +
    "\105\035\074\036\100\037\067\040\072\041\070\042\076" +
    "\001\002\000\004\062\117\001\002\000\012\013\uffdb\020" +
    "\uffdb\060\uffdb\062\uffdb\001\002\000\006\017\123\057\121" +
    "\001\002\000\034\004\104\006\071\030\065\031\063\032" +
    "\102\033\073\034\105\035\074\036\100\037\067\040\072" +
    "\041\070\042\076\001\002\000\004\062\125\001\002\000" +
    "\004\006\124\001\002\000\006\013\uffe6\062\uffe6\001\002" +
    "\000\012\013\uffd7\020\uffd7\060\uffd7\062\uffd7\001\002\000" +
    "\006\020\130\060\131\001\002\000\006\020\uffea\060\uffea" +
    "\001\002\000\034\004\104\006\071\030\065\031\063\032" +
    "\102\033\073\034\105\035\074\036\100\037\067\040\072" +
    "\041\070\042\076\001\002\000\006\013\uffe5\062\uffe5\001" +
    "\002\000\006\020\uffe9\060\uffe9\001\002\000\036\004\104" +
    "\005\136\006\071\030\065\031\063\032\102\033\073\034" +
    "\105\035\074\036\100\037\067\040\072\041\070\042\076" +
    "\001\002\000\004\023\135\001\002\000\024\003\uffd2\007" +
    "\uffd2\010\uffd2\014\uffd2\027\uffd2\043\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\001\002\000\006\013\uffce\020\uffce\001\002\000" +
    "\006\013\uffcf\020\uffcf\001\002\000\006\017\123\057\121" +
    "\001\002\000\004\062\142\001\002\000\012\013\uffd3\020" +
    "\uffd3\060\uffd3\062\uffd3\001\002\000\006\017\123\057\121" +
    "\001\002\000\004\062\145\001\002\000\012\013\uffd8\020" +
    "\uffd8\060\uffd8\062\uffd8\001\002\000\034\004\104\006\071" +
    "\030\065\031\063\032\102\033\073\034\105\035\074\036" +
    "\100\037\067\040\072\041\070\042\076\001\002\000\004" +
    "\020\150\001\002\000\034\004\104\006\071\030\065\031" +
    "\063\032\102\033\073\034\105\035\074\036\100\037\067" +
    "\040\072\041\070\042\076\001\002\000\004\062\152\001" +
    "\002\000\012\013\uffda\020\uffda\060\uffda\062\uffda\001\002" +
    "\000\006\017\123\057\121\001\002\000\004\062\155\001" +
    "\002\000\012\013\uffd5\020\uffd5\060\uffd5\062\uffd5\001\002" +
    "\000\006\017\123\057\121\001\002\000\004\062\160\001" +
    "\002\000\012\013\uffd4\020\uffd4\060\uffd4\062\uffd4\001\002" +
    "\000\006\017\123\057\121\001\002\000\004\062\163\001" +
    "\002\000\012\013\uffd6\020\uffd6\060\uffd6\062\uffd6\001\002" +
    "\000\034\004\104\006\071\030\065\031\063\032\102\033" +
    "\073\034\105\035\074\036\100\037\067\040\072\041\070" +
    "\042\076\001\002\000\004\020\166\001\002\000\034\004" +
    "\104\006\071\030\065\031\063\032\102\033\073\034\105" +
    "\035\074\036\100\037\067\040\072\041\070\042\076\001" +
    "\002\000\004\062\170\001\002\000\012\013\uffdd\020\uffdd" +
    "\060\uffdd\062\uffdd\001\002\000\034\004\104\006\071\030" +
    "\065\031\063\032\102\033\073\034\105\035\074\036\100" +
    "\037\067\040\072\041\070\042\076\001\002\000\004\020" +
    "\173\001\002\000\034\004\104\006\071\030\065\031\063" +
    "\032\102\033\073\034\105\035\074\036\100\037\067\040" +
    "\072\041\070\042\076\001\002\000\004\062\175\001\002" +
    "\000\012\013\uffdc\020\uffdc\060\uffdc\062\uffdc\001\002\000" +
    "\024\003\ufff4\007\ufff4\010\ufff4\014\ufff4\027\ufff4\043\ufff4" +
    "\044\ufff4\045\ufff4\046\ufff4\001\002\000\014\050\207\051" +
    "\201\052\200\053\204\054\203\001\002\000\004\021\270" +
    "\001\002\000\004\021\261\001\002\000\016\047\uffb3\050" +
    "\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\001\002\000\004" +
    "\021\252\001\002\000\004\021\233\001\002\000\016\047" +
    "\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\001\002" +
    "\000\016\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054" +
    "\uffbe\001\002\000\004\021\224\001\002\000\016\047\uffbf" +
    "\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\001\002\000" +
    "\016\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0" +
    "\001\002\000\016\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053" +
    "\uffc1\054\uffc1\001\002\000\016\047\215\050\207\051\201" +
    "\052\200\053\204\054\203\001\002\000\016\047\uffb4\050" +
    "\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\001\002\000\004" +
    "\045\216\001\002\000\004\013\217\001\002\000\004\023" +
    "\220\001\002\000\004\062\221\001\002\000\004\013\222" +
    "\001\002\000\004\023\223\001\002\000\024\003\uffc6\007" +
    "\uffc6\010\uffc6\014\uffc6\027\uffc6\043\uffc6\044\uffc6\045\uffc6" +
    "\046\uffc6\001\002\000\004\021\225\001\002\000\004\012" +
    "\226\001\002\000\004\024\227\001\002\000\006\005\037" +
    "\006\040\001\002\000\004\013\231\001\002\000\004\023" +
    "\232\001\002\000\022\047\uffb0\050\uffb0\051\uffb0\052\uffb0" +
    "\053\uffb0\054\uffb0\055\uffb0\056\uffb0\001\002\000\004\021" +
    "\234\001\002\000\004\012\235\001\002\000\004\024\236" +
    "\001\002\000\006\017\240\057\237\001\002\000\006\005" +
    "\037\006\040\001\002\000\004\006\244\001\002\000\004" +
    "\013\242\001\002\000\004\023\243\001\002\000\016\047" +
    "\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\001\002" +
    "\000\004\013\uffc4\001\002\000\006\020\uffe8\060\uffe8\001" +
    "\002\000\006\020\247\060\250\001\002\000\006\005\037" +
    "\006\040\001\002\000\004\013\uffc3\001\002\000\006\020" +
    "\uffe7\060\uffe7\001\002\000\004\021\253\001\002\000\004" +
    "\011\254\001\002\000\004\024\255\001\002\000\006\017" +
    "\123\057\121\001\002\000\004\013\257\001\002\000\004" +
    "\023\260\001\002\000\016\047\uffae\050\uffae\051\uffae\052" +
    "\uffae\053\uffae\054\uffae\001\002\000\004\021\262\001\002" +
    "\000\004\012\263\001\002\000\004\024\264\001\002\000" +
    "\006\005\037\006\040\001\002\000\004\013\266\001\002" +
    "\000\004\023\267\001\002\000\016\047\uffad\050\uffad\051" +
    "\uffad\052\uffad\053\uffad\054\uffad\001\002\000\004\021\271" +
    "\001\002\000\004\012\272\001\002\000\004\024\273\001" +
    "\002\000\006\005\037\006\040\001\002\000\004\013\275" +
    "\001\002\000\004\023\276\001\002\000\016\047\uffac\050" +
    "\uffac\051\uffac\052\uffac\053\uffac\054\uffac\001\002\000\006" +
    "\050\207\056\303\001\002\000\010\047\uffb9\050\uffb9\056" +
    "\uffb9\001\002\000\010\047\uffb1\050\uffb1\056\uffb1\001\002" +
    "\000\010\047\uffba\050\uffba\056\uffba\001\002\000\004\021" +
    "\315\001\002\000\010\047\306\050\207\056\303\001\002" +
    "\000\010\047\uffb2\050\uffb2\056\uffb2\001\002\000\004\046" +
    "\307\001\002\000\004\013\310\001\002\000\004\023\311" +
    "\001\002\000\004\062\312\001\002\000\004\013\313\001" +
    "\002\000\004\023\314\001\002\000\024\003\uffc5\007\uffc5" +
    "\010\uffc5\014\uffc5\027\uffc5\043\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\001\002\000\004\021\316\001\002\000\004\011\317" +
    "\001\002\000\004\024\320\001\002\000\006\017\123\057" +
    "\121\001\002\000\004\013\322\001\002\000\004\023\323" +
    "\001\002\000\012\047\uffaa\050\uffaa\055\uffaa\056\uffaa\001" +
    "\002\000\014\050\207\051\201\052\200\053\204\054\203" +
    "\001\002\000\016\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053" +
    "\uffb7\054\uffb7\001\002\000\016\047\330\050\207\051\201" +
    "\052\200\053\204\054\203\001\002\000\016\047\uffb8\050" +
    "\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\001\002\000\004" +
    "\043\331\001\002\000\004\013\332\001\002\000\004\023" +
    "\333\001\002\000\004\062\334\001\002\000\004\013\335" +
    "\001\002\000\004\023\336\001\002\000\024\003\uffc8\007" +
    "\uffc8\010\uffc8\014\uffc8\027\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\001\002\000\010\050\207\055\343\056\303\001" +
    "\002\000\012\047\uffbc\050\uffbc\055\uffbc\056\uffbc\001\002" +
    "\000\012\047\uffb5\050\uffb5\055\uffb5\056\uffb5\001\002\000" +
    "\012\047\uffbb\050\uffbb\055\uffbb\056\uffbb\001\002\000\004" +
    "\021\356\001\002\000\012\047\347\050\207\055\343\056" +
    "\303\001\002\000\012\047\uffbd\050\uffbd\055\uffbd\056\uffbd" +
    "\001\002\000\012\047\uffb6\050\uffb6\055\uffb6\056\uffb6\001" +
    "\002\000\004\044\350\001\002\000\004\013\351\001\002" +
    "\000\004\023\352\001\002\000\004\062\353\001\002\000" +
    "\004\013\354\001\002\000\004\023\355\001\002\000\024" +
    "\003\uffc7\007\uffc7\010\uffc7\014\uffc7\027\uffc7\043\uffc7\044" +
    "\uffc7\045\uffc7\046\uffc7\001\002\000\004\021\357\001\002" +
    "\000\004\012\360\001\002\000\004\024\361\001\002\000" +
    "\006\017\240\057\237\001\002\000\004\013\363\001\002" +
    "\000\004\023\364\001\002\000\012\047\uffab\050\uffab\055" +
    "\uffab\056\uffab\001\002\000\006\011\366\012\367\001\002" +
    "\000\004\021\u0103\001\002\000\004\021\370\001\002\000" +
    "\004\021\371\001\002\000\004\017\372\001\002\000\004" +
    "\006\373\001\002\000\004\065\374\001\002\000\004\063" +
    "\375\001\002\000\004\057\376\001\002\000\006\005\037" +
    "\006\040\001\002\000\006\020\247\060\u0100\001\002\000" +
    "\004\013\u0101\001\002\000\004\023\u0102\001\002\000\024" +
    "\003\ufff0\007\ufff0\010\ufff0\014\ufff0\027\ufff0\043\ufff0\044" +
    "\ufff0\045\ufff0\046\ufff0\001\002\000\004\021\u0104\001\002" +
    "\000\004\017\u0105\001\002\000\004\006\u0106\001\002\000" +
    "\004\065\u0107\001\002\000\004\063\u0108\001\002\000\004" +
    "\057\u0109\001\002\000\034\004\104\006\071\030\065\031" +
    "\063\032\102\033\073\034\105\035\074\036\100\037\067" +
    "\040\072\041\070\042\076\001\002\000\006\020\130\060" +
    "\u010b\001\002\000\004\013\u010c\001\002\000\004\023\u010d" +
    "\001\002\000\024\003\ufff1\007\ufff1\010\ufff1\014\ufff1\027" +
    "\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\001\002\000\004" +
    "\002\000\001\002\000\024\003\uffff\007\uffff\010\uffff\014" +
    "\uffff\027\uffff\043\uffff\044\uffff\045\uffff\046\uffff\001\002" +
    "\000\006\011\u0111\012\u0112\001\002\000\004\021\u011b\001" +
    "\002\000\004\021\u0113\001\002\000\004\021\u0114\001\002" +
    "\000\004\006\u0115\001\002\000\004\065\u0116\001\002\000" +
    "\004\063\u0117\001\002\000\006\005\037\006\040\001\002" +
    "\000\004\013\u0119\001\002\000\004\023\u011a\001\002\000" +
    "\024\003\ufff2\007\ufff2\010\ufff2\014\ufff2\027\ufff2\043\ufff2" +
    "\044\ufff2\045\ufff2\046\ufff2\001\002\000\004\021\u011c\001" +
    "\002\000\004\006\u011d\001\002\000\004\065\u011e\001\002" +
    "\000\004\063\u011f\001\002\000\034\004\104\006\071\030" +
    "\065\031\063\032\102\033\073\034\105\035\074\036\100" +
    "\037\067\040\072\041\070\042\076\001\002\000\004\013" +
    "\u0121\001\002\000\004\023\u0122\001\002\000\024\003\ufff3" +
    "\007\ufff3\010\ufff3\014\ufff3\027\ufff3\043\ufff3\044\ufff3\045" +
    "\ufff3\046\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0120\000\004\002\004\001\001\000\030\003\027\004" +
    "\007\014\010\016\030\017\013\020\022\022\025\023\015" +
    "\024\016\030\021\031\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\u010e\014\010" +
    "\016\030\017\013\020\022\022\025\023\015\024\016\030" +
    "\021\031\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\044\001\001" +
    "\000\006\051\052\052\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\074\012\076\025\065\026\100\027\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\106" +
    "\025\065\026\100\027\102\001\001\000\002\001\001\000" +
    "\012\005\110\025\065\026\100\027\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\113\025\065\026" +
    "\100\027\102\001\001\000\002\001\001\000\012\005\115" +
    "\025\065\026\100\027\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\121\001\001\000\014\005\126" +
    "\007\125\025\065\026\100\027\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\131\025" +
    "\065\026\100\027\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\136\025\065\026\100\027\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\146\025\065\026" +
    "\100\027\102\001\001\000\002\001\001\000\012\005\150" +
    "\025\065\026\100\027\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\164\025\065\026" +
    "\100\027\102\001\001\000\002\001\001\000\012\005\166" +
    "\025\065\026\100\027\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\171\025\065\026\100\027\102" +
    "\001\001\000\002\001\001\000\012\005\173\025\065\026" +
    "\100\027\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\032\201\036\204\037\211\040" +
    "\210\041\207\042\205\047\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\032\213\036\204\037\211\040\210\041\207" +
    "\042\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\240\001\001\000\006\006\244\010\245\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\250\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\255\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\264\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\273\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\035\300\036\301\044\277\050\303" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\035\304\036\301\044\277" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\320\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\032\324\036\204\037\211\040\210\041\207\042\205" +
    "\045\325\001\001\000\002\001\001\000\016\032\326\036" +
    "\204\037\211\040\210\041\207\042\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\033\340\036\344\043\337\044" +
    "\341\046\343\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\033\345\036" +
    "\344\043\337\044\341\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\361\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\244\010\376\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\126\007\u0109\025\065\026\100\027\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u0117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\u011f\025\065\026\100\027\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Instruction instruction = new Instruction();
    private MathOperations mathOP = new MathOperations();
    private StatisticalOperations sttOP = new StatisticalOperations();
    public String resultado = ""; 
    public ArrayList<LexError> errorsTable = new ArrayList<LexError>();

    public void syntax_error(Symbol s)
    {
            errorsTable.add(new LexError(1, "Sintactico", "Error sintactico en la entrada: " + s.value, s.right, s.left ));
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }

    public ArrayList<LexError> getErrorsTable(){
        return errorsTable;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PRGRM instructions_list ENDPRGRM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instructions_list ::= instructions_list instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instructions_list ::= instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= varasigdouble 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= varasigchar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruction ::= varasigarr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruction ::= ins_cnsl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruction ::= ins_clmn 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruction ::= exps_grph_bar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruction ::= exps_grph_pie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruction ::= exps_grph_ln 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruction ::= exps_grph_hst 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruction ::= error SMCLN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // varasigdouble ::= VRBL DPOINTS TYPED DPOINTS DPOINTS NAMEVAR LARROW SMINUS exps_nmbr END SMCLN 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int typedleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int typedright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String typed = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int namevarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int namevarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String namevar = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 main.Main.mainController.insertSymbolsTable(namevar.toString().toLowerCase(), typed, exp.toString().toLowerCase(), vleft, vright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varasigdouble",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // varasigchar ::= VRBL DPOINTS TYPEC DPOINTS DPOINTS NAMEVAR LARROW SMINUS exps_chr END SMCLN 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int typecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int typecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String typec = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int namevarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int namevarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String namevar = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 main.Main.mainController.insertSymbolsTable(namevar.toString().toLowerCase(), typec, exp.toString().toLowerCase(), vleft, vright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varasigchar",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // varasigarr ::= ARR DPOINTS TYPED DPOINTS DPOINTS SAT NAMEVAR LARROW SMINUS LSBRCKT exps_arrd RSBRCKT END SMCLN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int typedleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int typedright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String typed = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int namevarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int namevarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String namevar = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 main.Main.mainController.insertSymbolsTable(namevar.toString().toLowerCase(), typed, exp, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varasigarr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // varasigarr ::= ARR DPOINTS TYPEC DPOINTS DPOINTS SAT NAMEVAR LARROW SMINUS LSBRCKT exps_arrc RSBRCKT END SMCLN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int typecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int typecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String typec = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int namevarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int namevarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String namevar = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 main.Main.mainController.insertSymbolsTable(namevar.toString().toLowerCase(), typec, exp, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varasigarr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exps_nmbr ::= NMBR 
            {
              Object RESULT =null;
		int expsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String exps = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_nmbr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exps_nmbr ::= math_op 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_nmbr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exps_nmbr ::= NAMEVAR 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            if(main.Main.mainController.symbolsTable.get(exp.toString().toLowerCase()) != null ){
                RESULT = main.Main.mainController.symbolsTable.get(exp.toString().toLowerCase()).value;
            }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_nmbr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exps_chr ::= STRNG 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_chr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exps_chr ::= NAMEVAR 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(main.Main.mainController.symbolsTable.get(exp.toString().toLowerCase()) != null ){
                RESULT = main.Main.mainController.symbolsTable.get(exp.toString().toLowerCase()).value; 
                } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_chr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exps_arrd ::= exps_nmbr 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ArrayList<Double> list = new ArrayList<>();
                list.add(Double.parseDouble(String.valueOf(exp)));
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_arrd",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exps_arrd ::= exps_arrd CMM exps_nmbr 
            {
              Object RESULT =null;
		int lftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lft = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rghtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rghtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rght = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ArrayList<Double> expsList = (ArrayList<Double>) lft;
                expsList.add(Double.parseDouble(String.valueOf(rght)));
                RESULT = expsList;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_arrd",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exps_arrc ::= exps_chr 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ArrayList<String> list = new ArrayList<>();
                list.add(String.valueOf(exp));
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_arrc",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exps_arrc ::= exps_arrc CMM exps_chr 
            {
              Object RESULT =null;
		int lftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lft = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rghtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rghtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rght = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ArrayList<String> expsList = (ArrayList<String>) lft;
                expsList.add(String.valueOf(rght));
                RESULT = expsList;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_arrc",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exps_est ::= SAT NAMEVAR 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                if(main.Main.mainController.symbolsTable.get(exp.toString().toLowerCase()) != null ){
                RESULT = main.Main.mainController.symbolsTable.get(exp.toString().toLowerCase()).value;
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_est",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exps_est ::= LSBRCKT exps_arrd RSBRCKT 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = exp;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_est",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exps_var_clmn ::= NMBR 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_var_clmn",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exps_var_clmn ::= STRNG 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_var_clmn",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exps_var_clmn ::= NAMEVAR 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(main.Main.mainController.symbolsTable.get(exp.toString().toLowerCase()) != null ){
                RESULT = main.Main.mainController.symbolsTable.get(exp.toString().toLowerCase()).value;
            } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_var_clmn",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exps_array_clmn ::= exps_var_clmn 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ArrayList<String> list = new ArrayList<>();
                list.add(String.valueOf(exp));
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_array_clmn",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exps_array_clmn ::= exps_array_clmn CMM exps_var_clmn 
            {
              Object RESULT =null;
		int lftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lft = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rghtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rghtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rght = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ArrayList<String> expsList = (ArrayList<String>) lft;
                expsList.add(String.valueOf(rght));
                RESULT = expsList;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_array_clmn",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // math_op ::= ins_op 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = value.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("math_op",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // math_op ::= ins_est 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = value.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("math_op",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ins_op ::= WSUM LSPRTH exps_nmbr CMM exps_nmbr RSPRTH 
            {
              Object RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = mathOP.sum(Double.parseDouble(String.valueOf(left)), Double.parseDouble(String.valueOf(right))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ins_op ::= WRES LSPRTH exps_nmbr CMM exps_nmbr RSPRTH 
            {
              Object RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = mathOP.minus(Double.parseDouble(String.valueOf(left)), Double.parseDouble(String.valueOf(right))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ins_op ::= WMUL LSPRTH exps_nmbr CMM exps_nmbr RSPRTH 
            {
              Object RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = mathOP.mul(Double.parseDouble(String.valueOf(left)), Double.parseDouble(String.valueOf(right))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ins_op ::= WDIV LSPRTH exps_nmbr CMM exps_nmbr RSPRTH 
            {
              Object RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = mathOP.div(Double.parseDouble(String.valueOf(left)), Double.parseDouble(String.valueOf(right))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ins_op ::= WMOD LSPRTH exps_nmbr CMM exps_nmbr RSPRTH 
            {
              Object RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = mathOP.mod(Double.parseDouble(String.valueOf(left)), Double.parseDouble(String.valueOf(right))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ins_est ::= WMED LSPRTH exps_est RSPRTH 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = sttOP.calculateAverage((ArrayList<Double>)exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins_est",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ins_est ::= WMEDN LSPRTH exps_est RSPRTH 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = sttOP.calculateMedian((ArrayList<Double>)exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins_est",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ins_est ::= WMDA LSPRTH exps_est RSPRTH 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = sttOP.calculateModa((ArrayList<Double>)exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins_est",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ins_est ::= WVRNZ LSPRTH exps_est RSPRTH 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = sttOP.calculateVariance((ArrayList<Double>)exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins_est",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ins_est ::= WMX LSPRTH exps_est RSPRTH 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = sttOP.getMax((ArrayList<Double>)exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins_est",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ins_est ::= WMN LSPRTH exps_est RSPRTH 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = sttOP.getMin((ArrayList<Double>)exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins_est",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ins_cnsl ::= CNSL DPOINTS DPOINTS PRNT SEQLS exps_prnt END SMCLN 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 main.Main.mainController.viewList((ArrayList<Object>) exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins_cnsl",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exps_prnt ::= exps_nmbr 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ArrayList<Object> list = new ArrayList<>();
                list.add(String.valueOf(exp));
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_prnt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exps_prnt ::= STRNG 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ArrayList<Object> list = new ArrayList<>();
                list.add(String.valueOf(exp));
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_prnt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exps_prnt ::= exps_prnt CMM exps_nmbr 
            {
              Object RESULT =null;
		int lftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lft = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rghtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rghtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rght = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ArrayList<Object> expsList = (ArrayList<Object>) lft;
                expsList.add(String.valueOf(rght));
                RESULT = expsList;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_prnt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exps_prnt ::= exps_prnt CMM STRNG 
            {
              Object RESULT =null;
		int lftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lft = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rghtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rghtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rght = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ArrayList<Object> expsList = (ArrayList<Object>) lft;
                expsList.add(String.valueOf(rght));
                RESULT = expsList;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_prnt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ins_clmn ::= CNSL DPOINTS DPOINTS CLMN SEQLS exps_chr SMINUS RArrow exps_arrc_clmn END SMCLN 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int listexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object listexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        main.Main.mainController.viewColumn(exp.toString(), (ArrayList<Object>) listexp);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins_clmn",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exps_clmn ::= exps_est 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_clmn",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exps_clmn ::= exps_arrc_clmn 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_clmn",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exps_arrc_clmn ::= SAT NAMEVAR 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(main.Main.mainController.symbolsTable.get(exp.toString().toLowerCase()) != null ){
                RESULT = main.Main.mainController.symbolsTable.get(exp.toString().toLowerCase()).value;
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_arrc_clmn",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exps_arrc_clmn ::= LSBRCKT exps_array_clmn RSBRCKT 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = exp;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_arrc_clmn",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exps_grph_bar ::= GBAR LSPRTH data_grph_bar EXEC GBAR END SMCLN RSPRTH END SMCLN 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		  
                GraphBar datos = (GraphBar)exp;
                main.Main.mainController.generateGraphBar(datos);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_grph_bar",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exps_grph_pie ::= GPIE LSPRTH data_grph_pie EXEC GPIE END SMCLN RSPRTH END SMCLN 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		  
                GraphPie datos = (GraphPie)exp;
                main.Main.mainController.generateGraphPie(datos);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_grph_pie",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exps_grph_ln ::= GLINE LSPRTH data_grph_ln EXEC GLINE END SMCLN RSPRTH END SMCLN 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		  
                GraphLine datos = (GraphLine)exp;
                main.Main.mainController.generateGraphLine(datos);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_grph_ln",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exps_grph_hst ::= HSTGRM LSPRTH data_grph_hst EXEC HSTGRM END SMCLN RSPRTH END SMCLN 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		  
                GraphHistogram datos = (GraphHistogram)exp;
                main.Main.mainController.generateHistogram(datos);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_grph_hst",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exps_grph_ch ::= SAT NAMEVAR 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                if(main.Main.mainController.symbolsTable.get(exp.toString().toLowerCase()) != null ){
                RESULT = main.Main.mainController.symbolsTable.get(exp.toString().toLowerCase()).value;
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_grph_ch",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exps_grph_ch ::= LSBRCKT exps_arrc RSBRCKT 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = exp;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps_grph_ch",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ins_grph_bar ::= varasigtitle 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ArrayList<Object> parameters = new ArrayList<>(Arrays.asList("Title", exp.toString()));
                RESULT = (ArrayList<Object>) parameters; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins_grph_bar",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ins_grph_bar ::= varasigaxisX 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ArrayList<Object> parameters = new ArrayList<>(Arrays.asList("AxisX", exp));
                RESULT = (ArrayList<Object>) parameters; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins_grph_bar",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ins_grph_bar ::= varasigaxisY 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ArrayList<Object> parameters = new ArrayList<>(Arrays.asList("AxisY", exp));
                RESULT = (ArrayList<Object>) parameters; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins_grph_bar",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ins_grph_bar ::= varasigtitleX 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ArrayList<Object> parameters = new ArrayList<>(Arrays.asList("TitleX", exp.toString()));
                RESULT = (ArrayList<Object>) parameters; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins_grph_bar",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ins_grph_bar ::= varasigtitleY 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ArrayList<Object> parameters = new ArrayList<>(Arrays.asList("TitleY", exp.toString()));
                RESULT = (ArrayList<Object>) parameters; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins_grph_bar",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ins_grph_pie ::= varasigtitle 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ArrayList<Object> parameters = new ArrayList<>(Arrays.asList("Title", exp.toString()));
                RESULT = (ArrayList<Object>) parameters; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins_grph_pie",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ins_grph_pie ::= varasiglabel 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ArrayList<Object> parameters = new ArrayList<>(Arrays.asList("Label", exp));
                RESULT = (ArrayList<Object>) parameters; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins_grph_pie",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ins_grph_pie ::= varasigvalues 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ArrayList<Object> parameters = new ArrayList<>(Arrays.asList("Values", exp));
                RESULT = (ArrayList<Object>) parameters; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins_grph_pie",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ins_grph_hst ::= varasigtitle 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ArrayList<Object> parameters = new ArrayList<>(Arrays.asList("Title", exp.toString()));
                RESULT = (ArrayList<Object>) parameters;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins_grph_hst",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ins_grph_hst ::= varasigvalues 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ArrayList<Object> parameters = new ArrayList<>(Arrays.asList("Values", exp));
                RESULT = (ArrayList<Object>) parameters; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins_grph_hst",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // data_grph_bar ::= data_grph_bar ins_grph_bar 
            {
              Object RESULT =null;
		int lftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lft = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rghtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rghtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rght = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = main.Main.mainController.saveDataGraphBar(1, (GraphBar)lft, (ArrayList<Object>)rght);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_grph_bar",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // data_grph_bar ::= ins_grph_bar 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = main.Main.mainController.saveDataGraphBar(2, null, (ArrayList<Object>)exp);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_grph_bar",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // data_grph_pie ::= data_grph_pie ins_grph_pie 
            {
              Object RESULT =null;
		int lftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lft = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rghtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rghtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rght = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = main.Main.mainController.saveDataGraphPie(1, (GraphPie)lft, (ArrayList<Object>)rght);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_grph_pie",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // data_grph_pie ::= ins_grph_pie 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = main.Main.mainController.saveDataGraphPie(2, null, (ArrayList<Object>)exp);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_grph_pie",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // data_grph_ln ::= data_grph_ln ins_grph_bar 
            {
              Object RESULT =null;
		int lftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lft = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rghtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rghtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rght = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = main.Main.mainController.saveDataGraphLine(1, (GraphLine)lft, (ArrayList<Object>)rght);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_grph_ln",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // data_grph_ln ::= ins_grph_bar 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = main.Main.mainController.saveDataGraphLine(2, null, (ArrayList<Object>)exp);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_grph_ln",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // data_grph_hst ::= data_grph_hst ins_grph_hst 
            {
              Object RESULT =null;
		int lftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lft = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rghtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rghtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rght = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = main.Main.mainController.saveDataGraphHistogram(1, (GraphHistogram)lft, (ArrayList<Object>)rght);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_grph_hst",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // data_grph_hst ::= ins_grph_hst 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = main.Main.mainController.saveDataGraphHistogram(2, null, (ArrayList<Object>)exp);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_grph_hst",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // varasigtitle ::= TTL DPOINTS DPOINTS TYPEC SEQLS exps_chr END SMCLN 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                RESULT = exp.toString();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varasigtitle",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // varasigaxisX ::= AXISX DPOINTS DPOINTS TYPEC SEQLS exps_grph_ch END SMCLN 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                RESULT = (ArrayList<String>)exp;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varasigaxisX",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // varasigaxisY ::= AXISY DPOINTS DPOINTS TYPED SEQLS exps_est END SMCLN 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                RESULT = exp;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varasigaxisY",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // varasigtitleX ::= TTLX DPOINTS DPOINTS TYPEC SEQLS exps_chr END SMCLN 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                RESULT = exp.toString();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varasigtitleX",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // varasigtitleY ::= TTLY DPOINTS DPOINTS TYPEC SEQLS exps_chr END SMCLN 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                RESULT = exp.toString();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varasigtitleY",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // varasiglabel ::= LBL DPOINTS DPOINTS TYPEC SEQLS exps_grph_ch END SMCLN 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                RESULT = (ArrayList<String>)exp;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varasiglabel",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // varasigvalues ::= VLS DPOINTS DPOINTS TYPED SEQLS exps_est END SMCLN 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                RESULT = exp;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varasigvalues",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
